import os
import logging
from flask import Flask, request
from telegram import Bot, Update
# Google Gemini API ‡¥≤‡µà‡¥¨‡µç‡¥∞‡¥±‡¥ø
from google import genai
from google.genai.errors import APIError

# ==============================================================================
# ‡¥≤‡µã‡¥ó‡¥ø‡¥Ç‡¥ó‡µç ‡¥∏‡¥ú‡µç‡¥ú‡µÄ‡¥ï‡¥∞‡¥£‡¥Ç
# ==============================================================================
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# ==============================================================================
# 1. ‡¥ï‡µÄ‡¥ï‡µæ ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
# ==============================================================================
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")  # Render-‡µΩ ‡¥∏‡¥ú‡µç‡¥ú‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥ø‡¥Ø ‡¥ï‡µÄ

# ==============================================================================
# 2. ‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥í‡¥¨‡µç‡¥ú‡¥ï‡µç‡¥±‡µç‡¥±‡µÅ‡¥ï‡µæ
# ==============================================================================
app = Flask(__name__)
bot = Bot(token=TELEGRAM_TOKEN)

# Gemini ‡¥ï‡µç‡¥≤‡¥Ø‡¥®‡µç‡¥±‡µç ‡¥∏‡¥ú‡µç‡¥ú‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
try:
    gemini_client = genai.Client(api_key=GEMINI_API_KEY)
except Exception as e:
    logging.error(f"Gemini Client Initialization Error: {e}")

# ==============================================================================
# 3. AI ‡¥≤‡µã‡¥ú‡¥ø‡¥ï‡µç ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª
# ==============================================================================
def get_ai_response(prompt):
    """‡¥Ø‡µÇ‡¥∏‡µº ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç Gemini API-‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥Ø‡¥ö‡µç‡¥ö‡µç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥®‡µá‡¥ü‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    try:
        response = gemini_client.models.generate_content(
            model='gemini-2.5-flash',
            contents=[
                "You are a helpful and friendly AI Telegram character. Respond briefly and engagingly to the user's message.",
                prompt
            ]
        )

        if response.text:
            return response.text.strip()
        else:
            logging.warning("Gemini returned an empty response or was blocked by a safety filter.")
            return "‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥≤‡¥≥‡¥ø‡¥§‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡¥Æ‡µã?"

    except APIError as e:
        logging.error(f"Gemini API Error: {e}")
        return "Gemini API Error: ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ API Key ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ usage ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
    except Exception as e:
        logging.error(f"General AI Exception: {e}")
        return "‡¥é‡¥®‡µç‡¥§‡µã ‡¥™‡¥ø‡¥∂‡¥ï‡µç ‡¥∏‡¥Ç‡¥≠‡¥µ‡¥ø‡¥ö‡µç‡¥ö‡µÅ üòÖ. ‡¥ï‡µÅ‡¥±‡¥ö‡µç‡¥ö‡µç ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÇ."


# ==============================================================================
# 4. ‡¥µ‡µÜ‡¥¨‡µç‚Äå‡¥π‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥±‡µÇ‡¥ü‡µç‡¥ü‡µç
# ==============================================================================
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        try:
            update = Update.de_json(request.get_json(force=True), bot)
            
            if update.message and update.message.text:
                chat_id = update.message.chat.id
                text = update.message.text

                # 1. AI ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥£‡¥Ç ‡¥®‡µá‡¥ü‡µÅ‡¥®‡µç‡¥®‡µÅ
                ai_response = get_ai_response(text)

                # üîπ Debug print ‚Äî Render logs-‡µΩ ‡¥ï‡¥æ‡¥£‡¥æ‡¥Ç
                print(f"User said: {text} | Gemini replied: {ai_response}")

                # 2. ‡¥ü‡µÜ‡¥≤‡¥ø‡¥ó‡µç‡¥∞‡¥æ‡¥Æ‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
                try:
                    bot.send_message(chat_id=chat_id, text=ai_response)
                    logging.info(f"‚úÖ Successfully sent message to chat_id: {chat_id}")
                except Exception as send_error:
                    logging.error(f"üö´ TELEGRAM SEND FAILED: {send_error}")
            
        except Exception as e:
            logging.error(f"Error processing update (General): {e}")
            
    return "ok"

# ==============================================================================
# 5. ‡¥π‡µã‡¥Ç ‡¥±‡µÇ‡¥ü‡µç‡¥ü‡µç
# ==============================================================================
@app.route('/')
def index():
    return "üöÄ Telegram bot is running on Gemini API!"


# ==============================================================================
# 6. Render-‡µΩ Gunicorn ‡¥µ‡¥¥‡¥ø ‡¥ì‡¥ü‡µÅ‡¥Ç
# ==============================================================================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
